import styles from "@/styles/Home.module.css";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useRef, useState } from "react";
import store from "store2";

interface Details {
  id: string;
  width: number;
  height: number;
  x: number;
  y: number;
}

const BOX_PREFIX = "box-";

const getBoxKeys = () => {
  const keys = store.keys();
  return keys.filter((key: string) => key.includes(BOX_PREFIX));
};

export default function Local() {
  const defaultKeyOut = "";

  const mainSquareRef = useRef<HTMLDivElement>(null);
  const otherSquareRef = useRef<Array<HTMLDivElement | null>>([]);
  const otherBoxIdsRef = useRef<string[]>([]);

  const [otherBoxIdsState, setOtherBoxIdsState] = useState<string[]>([]);

  const router = useRouter();
  const { id: browserId } = router.query ?? {};
  const defaultKeyString = useRef<string>("");

  const intervalId = useRef<NodeJS.Timeout>();

  const updateOtherBoxIds = () => {
    const keysBox = getBoxKeys();
    const otherBox = keysBox.filter(
      (key: any) => key !== defaultKeyString.current
    );
    setOtherBoxIdsState(otherBox);
    otherBoxIdsRef.current = otherBox;
  };

  useEffect(() => {
    if (!browserId || !defaultKeyString) return;
    // Key for the current box
    const defaultKeyBox = `${BOX_PREFIX}${browserId}`;
    defaultKeyString.current = defaultKeyBox;

    updateOtherBoxIds();

    // Set the main box to local storage
    const sendSquareDetails = (id: string) => {
      if (!mainSquareRef.current) return;
      const rect = mainSquareRef.current.getBoundingClientRect();
      const details = {
        id: id,
        width: rect.width,
        height: rect.height,
        x: window.screenX + rect.left,
        y: window.screenY + rect.top,
      };
      store(defaultKeyBox, details);
    };

    const recreateOtherSquare = (details: Details, id: string) => {
      let el = otherSquareRef.current.find((el) => el?.id === id);

      // set the style of the other box
      if (el) {
        el.style.width = `${details.width}px`;
        el.style.height = `${details.height}px`;
        el.style.position = "fixed";
        el.style.left = `${details.x - window.screenX}px`;
        el.style.top = `${details.y - window.screenY}px`;
      }
    };

    intervalId.current = setInterval(() => {
      sendSquareDetails(browserId as string);

      updateOtherBoxIds();

      // we use the otherBoxIdsRef is because we don't want to have a dependency on the useEffect
      otherBoxIdsRef.current.forEach((key: string) => {
        const otherBoxDetails = store.get(key);
        if (!otherBoxDetails) return;
        recreateOtherSquare(otherBoxDetails, key);
      });
    }, 100);

    return () => {
      clearInterval(intervalId.current);
    };
  }, [browserId]);

  useEffect(() => {
    defaultKeyString.current = defaultKeyOut;

    const removeLocal = () => {
      store.remove(defaultKeyString.current);
    };

    // When tab is closed, remove the local storage
    window.addEventListener("beforeunload", removeLocal);
    return () => {
      clearInterval(intervalId.current);
      window.removeEventListener("beforeunload", removeLocal);
    };
  }, []);

  return (
    <>
      <Head>
        <title>Box overlay</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${styles[`theme-${browserId}`]}`}>
        {!browserId && (
          <>
            <h1>No browser id</h1>
          </>
        )}
        {browserId && (
          <>
            <div
              ref={mainSquareRef}
              className={`${styles.square} ${styles[`square-${browserId}`]}`}
            ></div>
            {otherBoxIdsState.map((key: string, index) => {
              const otherBoxDetails = store.get(key);
              if (!otherBoxDetails) return;
              return (
                <div
                  id={key}
                  key={key}
                  ref={(el) => {
                    otherSquareRef.current[index] = el;
                  }}
                  className={`${styles["other-square"]} ${
                    otherBoxDetails.id
                      ? styles[`square-${otherBoxDetails.id}`]
                      : styles.hide
                  }`}
                ></div>
              );
            })}
          </>
        )}
      </main>
    </>
  );
}
